# Rho Grammar

program          ::=   stmtlist

idchain          ::=   ID   [ '.' ID ]+
idlist           ::=   ID   [ ',' ID ]+
exprlist         ::=   expr [ ',' expr ]+

assign           ::=   idlist  [ bop ] '=' exprlist
index            ::=   idchain '[' expr ']'
call             ::=   idchain '(' exprlist ')'
incdec           ::=   idchain ( '++' | '--' )

expr             ::=   uexpr  bop  expr
uexpr            ::=   number       |
                       ID           |
                       index        |
                       call         | 
                       'uop'  expr  | 
                       '(' expr ')' |
                       ifexpr       |
                       forexpr      |
                       switchexpr

uop              ::=   '!'  | '~'
bop              ::=   '+'  | '-'  | '*'  | '/'  | '%'  | '**' | '&' |
                       '|'  | '^'  | '&&' | '||' | '<<' | '>>' | '<' |
                       '>'  | '<=' | '>=' | '==' | '!=' | '??'

ifexpr           ::=   'if' expr block [ 'else' block ]
forexpr          ::=   cforexpr | iteration
switchexpr       ::=   'switch' expr '{' caselist '}'
caselist         ::=   ( 'default' ':' block ) | [ 'case' expr ':' block ]+
cforexpr         ::=   'for' assign ';' expr ';' expr block
iteration        ::=   # TODO

block            ::=   '{' stmtlist '}'
stmtlist         ::=   stmt+      EOT
stmt             ::=   vardecl    |
                       fndecl     |
                       structdecl |
                       ifacedecl  |
                       assign     |
                       expr

vardecl          ::=   'var'        arglist
fndecl           ::=   'fn'         [ ID '.' ]  proto block
structdecl       ::=   'struct'     ID '{' [ arglist+ ] '}'
ifacedecl        ::=   'interface'  ID '{' [ proto+ ] '}'

proto            ::=   ID '(' [ arglistlist ] ')' arglistlist
arglistlist      ::=   arglist [ ',' arglist ]+
arglist          ::=   idlist type

type             ::=   'int' | 'float' | 'bool' | ID
